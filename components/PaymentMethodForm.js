// components/PaymentMethodForm.js - FORMUL√ÅRIO DE FORMA DE PAGAMENTO
import React from 'react';
import { Alert } from 'react-native';
import { useSQLiteContext } from 'expo-sqlite';
import { useAuth } from '../services/AuthContext';
import ModalForm from './ModalForm';

// √çcones dispon√≠veis para formas de pagamento
const AVAILABLE_PAYMENT_ICONS = [
  // Principais
  { value: 'üí≥', label: 'Cart√£o' },
  { value: 'üíµ', label: 'Dinheiro' },
  { value: 'üí∞', label: 'Cart√£o D√©bito' },
  { value: 'üè¶', label: 'Transfer√™ncia' },
  { value: 'üì±', label: 'PIX' },
  { value: 'üí∏', label: 'Pagamento' },
  { value: 'ü™ô', label: 'Moedas' },
  { value: 'üí≤', label: 'D√≥lar' },
  { value: 'üèß', label: 'ATM' },
  { value: 'üí¥', label: 'Yen' },
  { value: 'üí∂', label: 'Euro' },
  { value: 'üí∑', label: 'Libra' },
  { value: 'üì≤', label: 'App Mobile' },
  { value: 'üè™', label: 'Loja' },
  { value: 'üõí', label: 'Compras' },
  // Secund√°rios
  { value: 'üíé', label: 'Premium' },
  { value: 'üé´', label: 'Vale' },
  { value: 'üßæ', label: 'Recibo' },
  { value: 'üìÑ', label: 'Documento' },
  { value: '‚úâÔ∏è', label: 'Envelope' },
  { value: 'üìÆ', label: 'Correio' },
  { value: 'üîñ', label: 'Etiqueta' },
  { value: 'üè∑Ô∏è', label: 'Tag' },
  { value: 'üíå', label: 'Carta' },
  { value: 'üíπ', label: 'Investimento' },
  { value: 'üìà', label: 'Crescimento' },
  { value: 'üìä', label: 'Gr√°fico' },
  { value: 'üí±', label: 'C√¢mbio' },
  { value: 'ü§ë', label: 'Rico' },
  { value: 'üíØ', label: 'Cem' },
  { value: 'üî¢', label: 'N√∫meros' },
  { value: 'üíº', label: 'Neg√≥cios' },
  { value: 'üéØ', label: 'Alvo' },
  { value: 'üèÖ', label: 'Medalha' },
  { value: 'üèÜ', label: 'Trof√©u' },
  // Coloridos
  { value: 'üî¥', label: 'Vermelho' },
  { value: 'üü†', label: 'Laranja' },
  { value: 'üü°', label: 'Amarelo' },
  { value: 'üü¢', label: 'Verde' },
  { value: 'üîµ', label: 'Azul' },
  { value: 'üü£', label: 'Roxo' },
  { value: '‚ö´', label: 'Preto' },
  { value: '‚ö™', label: 'Branco' },
  { value: 'üü§', label: 'Marrom' }
];

// Campos do formul√°rio
const paymentMethodFields = [
  {
    name: 'name',
    type: 'text',
    label: 'Nome da Forma de Pagamento',
    placeholder: 'Ex: Cart√£o Cr√©dito, PIX, Dinheiro',
    icon: 'credit-card',
    maxLength: 30,
    helper: 'Escolha um nome √∫nico e f√°cil de identificar'
  },
  {
    name: 'icon',
    type: 'select',
    label: '√çcone da Forma de Pagamento',
    options: AVAILABLE_PAYMENT_ICONS,
    helper: 'Selecione o √≠cone que melhor representa esta forma de pagamento'
  }
];

// Valida√ß√µes do formul√°rio
const validationRules = {
  name: {
    required: true,
    minLength: 2,
    minLengthMessage: 'Nome deve ter pelo menos 2 caracteres',
    custom: (value) => {
      if (value && value.length > 30) {
        return 'Nome n√£o pode ter mais de 30 caracteres';
      }
      return '';
    }
  },
  icon: {
    required: true,
    requiredMessage: 'Escolha um √≠cone para a forma de pagamento'
  }
};

export default function PaymentMethodForm({ visible, paymentMethod, onClose, onSaved }) {
  const db = useSQLiteContext();
  const { user } = useAuth();

  // Fun√ß√£o de salvamento
  const handleSave = async (formData) => {
    if (!user) {
      throw new Error('Voc√™ precisa estar logado para gerenciar formas de pagamento.');
    }

    const data = {
      name: formData.name.trim(),
      icon: formData.icon,
      user_id: user.id
    };

    try {
      if (paymentMethod?.id) {
        // Verificar se j√° existe outra forma de pagamento com o mesmo nome
        const existingMethod = await db.getFirstAsync(
          'SELECT id FROM payment_methods WHERE LOWER(name) = LOWER(?) AND user_id = ? AND id != ?',
          [data.name, user.id, paymentMethod.id]
        );

        if (existingMethod) {
          throw new Error('J√° existe uma forma de pagamento com este nome.');
        }

        // Atualiza√ß√£o
        await db.runAsync(
          `UPDATE payment_methods 
           SET name = ?, icon = ?
           WHERE id = ? AND user_id = ?`,
          [data.name, data.icon, paymentMethod.id, user.id]
        );
        
        console.log('‚úÖ Forma de pagamento atualizada:', paymentMethod.id);
      } else {
        // Verificar se j√° existe forma de pagamento com o mesmo nome
        const existingMethod = await db.getFirstAsync(
          'SELECT id FROM payment_methods WHERE LOWER(name) = LOWER(?) AND user_id = ?',
          [data.name, user.id]
        );

        if (existingMethod) {
          throw new Error('J√° existe uma forma de pagamento com este nome.');
        }

        // Inser√ß√£o
        const result = await db.runAsync(
          'INSERT INTO payment_methods (name, icon, user_id) VALUES (?, ?, ?)',
          [data.name, data.icon, data.user_id]
        );
        
        console.log('‚úÖ Nova forma de pagamento criada com ID:', result.lastInsertRowId);
      }

      // Notifica listeners globais
      if (global.expenseListeners) {
        global.expenseListeners.forEach(listener => {
          if (typeof listener === 'function') {
            listener();
          }
        });
      }

      if (onSaved) onSaved();
    } catch (error) {
      console.error('‚ùå Erro ao salvar forma de pagamento:', error);
      throw new Error(error.message || 'N√£o foi poss√≠vel salvar a forma de pagamento. Tente novamente.');
    }
  };

  // Valores iniciais do formul√°rio
  const initialValues = {
    name: paymentMethod?.name || '',
    icon: paymentMethod?.icon || 'üí≥'
  };

  return (
    <ModalForm
      visible={visible}
      onClose={onClose}
      onSubmit={handleSave}
      title={paymentMethod?.id ? 'Editar Forma de Pagamento' : 'Nova Forma de Pagamento'}
      subtitle={paymentMethod?.id ? 'Atualize as informa√ß√µes da forma de pagamento' : 'Preencha os dados da nova forma de pagamento'}
      fields={paymentMethodFields}
      validationRules={validationRules}
      initialValues={initialValues}
      submitText={paymentMethod?.id ? 'Atualizar' : 'Salvar'}
      cancelText='Cancelar'
    />
  );
}